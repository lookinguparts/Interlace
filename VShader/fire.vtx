/*{
	"DESCRIPTION": "fire",
	"CREDIT": "by tracyscott",
	"ISFVSN": "2.0",
	"CATEGORIES": [
		"VERTEX SDF"
	],
	"INPUTS": [
         {
            "NAME": "fMovX",
            "TYPE": "float",
            "DEFAULT": -0.01,
            "MIN": -1.0,
            "MAX": 1.0
         },
{
            "NAME": "fMovY",
            "TYPE": "float",
            "DEFAULT": -0.5,
            "MIN": -1.0,
            "MAX": 1.0
         },
         {
            "NAME": "dMovX",
            "TYPE": "float",
            "DEFAULT": -0.01,
            "MIN": -1.0,
            "MAX": 1.0
         },
{
            "NAME": "dMovY",
            "TYPE": "float",
            "DEFAULT": -0.3,
            "MIN": -1.0,
            "MAX": 1.0
         },
         {
            "NAME": "nStrngth",
            "TYPE": "float",
            "DEFAULT": 40.0,
            "MIN": 0.00,
            "MAX": 100.0
         },
         {
            "NAME": "dStrngth",
            "TYPE": "float",
            "DEFAULT": 0.1,
            "MIN": 0.00,
            "MAX": 5.0
         },
{
            "NAME": "zoomx",
            "TYPE": "float",
            "DEFAULT": 0.1,
            "MIN": 0.00,
            "MAX": 10.0
         },
         {
                     "NAME": "zoomy",
                     "TYPE": "float",
                     "DEFAULT": 0.1,
                     "MIN": 0.00,
                     "MAX": 10.0
                  },
                   {
                                       "NAME": "posy",
                                       "TYPE": "float",
                                       "DEFAULT": 0.0,
                                       "MIN": -10.00,
                                       "MAX": 10.0
                                    }
	]
}*/

#version 330

uniform float fTime;
uniform float fMovX;
uniform float fMovY;
uniform float dMovX;
uniform float dMovY;
uniform float nStrngth;
uniform float dStrngth;
uniform float zoomx;
uniform float zoomy;
uniform float posy;

layout(location = 0) in vec3 position;
out vec3 outColor;


#include <palettes.vti>
#include <sdf2d.vti>
#include <consts.vti>
#include <uvwrap.vti>


/** NOISE **/
float rand(vec2 co) {
    return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);
}

vec2 hash( vec2 p ) {
    p = vec2( dot(p,vec2(127.1,311.7)),
              dot(p,vec2(269.5,183.3)) );

    return -1.0 + 2.0*fract(sin(p)*43758.5453123);
}

float noise( in vec2 p ) {
    const float K1 = 0.366025404; // (sqrt(3)-1)/2;
    const float K2 = 0.211324865; // (3-sqrt(3))/6;

    vec2 i = floor( p + (p.x+p.y)*K1 );

    vec2 a = p - i + (i.x+i.y)*K2;
    vec2 o = step(a.yx,a.xy);
    vec2 b = a - o + K2;
    vec2 c = a - 1.0 + 2.0*K2;

    vec3 h = max( 0.5-vec3(dot(a,a), dot(b,b), dot(c,c) ), 0.0 );

    vec3 n = h*h*h*h*vec3( dot(a,hash(i+0.0)), dot(b,hash(i+o)), dot(c,hash(i+1.0)));

    return dot( n, vec3(70.0) );
}

float fbm ( in vec2 p ) {
    float f = 0.0;
    mat2 m = mat2( 1.6,  1.2, -1.2,  1.6 );
    f  = 0.5000*noise(p); p = m*p;
    f += 0.2500*noise(p); p = m*p;
    f += 0.1250*noise(p); p = m*p;
    f += 0.0625*noise(p); p = m*p;
    f = 0.5 + 0.5 * f;
    return f;
}

/** DISTORTION **/
vec3 bumpMap(vec2 uv, float normalStrength) {
    vec2 s = vec2(.0005, .0005); // 1. / iResolution.xy;
    float p =  fbm(uv);
    float h1 = fbm(uv + s * vec2(1., 0));
    float v1 = fbm(uv + s * vec2(0, 1.));

    vec2 xy = (p - vec2(h1, v1)) * normalStrength;
    return vec3(xy + .5, 1.);
}

void main() {
    vec3 fragColor = vec3(0., 0., 0.);
    vec2 uv = uvwrap(position);
    //uv = uv - 0.5;
    vec2 fireMovement = vec2(fMovX, fMovY);
    vec2 distortionMovement = vec2(dMovX, dMovY);
    float timeScale = fTime;
    float normalStrength = nStrngth;
    float distortionStrength = dStrngth;

    //uv.xy = uv.yx;
    uv.y -= posy;
    uv.x *= zoomx;
    uv.y *= zoomy;
    vec3 normal = bumpMap(uv * vec2(1.0, 0.3) + distortionMovement * timeScale, normalStrength);

    vec2 displacement = clamp((normal.xy - .5) * distortionStrength, -1., 1.);
    uv += displacement;

    vec2 uvT = (uv * vec2(1.0, 0.5)) + timeScale * fireMovement;
    float n = pow(fbm(8.0 * uvT), 1.0);

    float gradient = pow(1.0 - uv.y, 2.0) * 5.;
    float finalNoise = n * gradient;

    vec3 coloring = vec3(2.*n*n*n, 2.*n*n*n*n, 2*n);
    float redmod = 1.0;
    float bluemod = 1.0;
    float greenmod = 1.0;
    //coloring = vec3(2.*n * redmod, n*n*n * greenmod, n*n*n*n * bluemod);
    //coloring = vec3(n*n*n*n, n*n*n, 2.*n);
    //coloring = vec3(n, n, n);
    vec3 color = clamp(finalNoise * coloring, 0., 1.);
    //color = clamp(finalNoise*vec3(n, n,n), 0., 1.);
    outColor = color;
}