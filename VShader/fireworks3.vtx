/*{
	"DESCRIPTION": "fireworks3",
	"CREDIT": "by tracyscott",
	"ISFVSN": "2.0",
	"CATEGORIES": [
		"VERTEX SDF"
	],
	"INPUTS": [
{
            "NAME": "posx",
            "TYPE": "float",
            "DEFAULT": 0.0,
            "MIN": -5.0,
            "MAX": 5.0
         },
{
            "NAME": "posy",
            "TYPE": "float",
            "DEFAULT": 0.0,
            "MIN": -5.0,
            "MAX": 5.0
         },
         {
            "NAME": "size",
            "TYPE": "float",
            "DEFAULT": 1.0,
            "MIN": 0.5,
            "MAX": 4.0
         },
         {
                     "NAME": "zoomx",
                     "TYPE": "float",
                     "DEFAULT": 1.0,
                     "MIN": 0.1,
                     "MAX": 2.0
                  },
                  {
                              "NAME": "zoomy",
                              "TYPE": "float",
                              "DEFAULT": 1.0,
                              "MIN": 0.1,
                              "MAX": 2.0
                           },
                            {
                              "NAME": "palval",
                              "TYPE": "float",
                              "DEFAULT": 0.0,
                              "MIN": 0.0,
                              "MAX": 20.0
                           },
                           {
                              "NAME": "pald",
                              "TYPE": "float",
                              "DEFAULT": 1.0,
                              "MIN": 0.0,
                              "MAX": 10.0
                           },
                           {
                              "NAME": "powval",
                              "TYPE": "float",
                              "DEFAULT": 1.0,
                              "MIN": 0.1,
                              "MAX": 5.0
                           },
{
            "NAME": "bright",
            "TYPE": "float",
            "DEFAULT": 1.0,
            "MIN": 0.0,
            "MAX": 10.0
         },
         {
                     "NAME": "blscale",
                     "TYPE": "float",
                     "DEFAULT": 0.2,
                     "MIN": 0.0,
                     "MAX": 1.0
                  }
	]
}*/

#version 330

uniform float fTime;
uniform float posx;
uniform float posy;
uniform float size;
uniform float zoomx;
uniform float zoomy;
uniform float palval;
uniform float pald;
uniform float powval;
uniform float bright;
uniform float blscale;

layout(location = 0) in vec3 position;
out vec3 outColor;


#include <palettes.vti>
#include <sdf2d.vti>
#include <consts.vti>
#include <uvwrap.vti>

#define NUM_EXPLOSIONS 8.

vec2 Hash12(float t) {
    float x = fract(sin(t*674.3)*453.2);
    float y = fract(sin((t+x)*714.3)*263.2);
    return vec2(x, y);
}

vec2 Hash12_Polar(float t) {
    float a = fract(sin(t*674.3)*453.2) * 6.2832;
    float d = fract(sin((t+a)*714.3)*263.2);
    return vec2(sin(a), cos(a)) * d;
}

float Explosion(vec2 uv, float t) {
    float sparks = 0.;
    for (float i = 0; i < 100.; i++) {
        vec2 dir = Hash12_Polar(i+1.);
        float d = length(uv-dir*t*size);
        float brightness = mix(0.0005, 0.002, smoothstep(.05, 0., t));
        brightness = mix(0.0005, 0.0004, smoothstep(0.0, 0.1, t));
        //brightness *= sin(t*20.+i)*.5 + .7;
        brightness *= smoothstep(1., .75, t);
        sparks += (bright * brightness)/d;
    }

    sparks = pow(sparks, powval);
    return sparks;
}

void main() {
    vec2 uv = uvwrap(position);
    uv = 1. * (uv - 0.5);
    uv.x = zoomx * uv.x;
    uv.y = zoomy * uv.y;
    //uv.x -= posx;
    //uv.y -= posy;
    float globalScale = 1.2;

    vec3 col = vec3(0.);
    vec3 blue = vec3(.16, .9, 1.);

    for (float i = 0.; i < NUM_EXPLOSIONS; i++) {
        float t = fTime+ i/NUM_EXPLOSIONS;
        float ft = floor(t);
        float frac = fract(t);

        vec3 color = vec3(1., 0.15, 0.2);
        vec3 color2 = vec3(1., 0.1, 0.1);
        int iter = int(i);
        if (iter % 3 == 1 ) {
            color = vec3(1., 1., 0.9);
        } else if (iter % 3 == 2) {
            color = vec3(0.15, 0.2, 1.);
            color2 = vec3(0.1, 0.1, 1.);
        } else {
            color = vec3(1., 0.15, 0.2);
            color2 = vec3(1., 0.1, 0.1);
        }
        //vec3 brightred = vec3(1., 0.2, 0.2);
        vec3 white = vec3(1., 1., 1.);

        frac = smoothstep(0., .95, frac);
        //color = mix(color, color2, frac);
        frac = smoothstep(0., .9, frac);
        color = mix(color, white, frac);

        //vec2 offs = (Hash12(i+1.+ft)-0.5)*vec2(1., .5);
        //
        vec2 offs = (Hash12(i+1.+ft)-0.5)*vec2(1., .7);
        offs.y = offs.y * 0.8 + 0.2;
        //col += 0.01/length(uv-offs);

        float expval =Explosion(uv-offs, fract(t));
        //color = mix(white, color, smoothstep(0., 0.8, expval));
        col += expval * color;
    }

    //color = vec3(1., 1., 1.);
    //col += Explosion(uv, fract(fTime))*color;

    //col *= globalScale;
    //col += .3;
    blue = blue * blscale;
    if (length(col) < 0.6) {
    col = mix(col, blue, smoothstep(0.5, 0.0, col.r + col.g + col.b));
    }
    //if (length(col) < 0.2) {
    //    col = blue;
    // }
    outColor = vec3(clamp(col.r, 0.0, 1.0), clamp(col.g, 0.0, 1.0), clamp(col.b, 0.0, 1.0));
}
