/*{
	"DESCRIPTION": "palviz",
	"CREDIT": "by tracyscott",
	"ISFVSN": "2.0",
	"CATEGORIES": [
		"VERTEX SDF"
	],
	"INPUTS": [
         {
            "NAME": "palval",
            "TYPE": "float",
            "DEFAULT": 0.0,
            "MIN": 0.0,
            "MAX": 20.0
         },
         {
            "NAME": "pald",
            "TYPE": "float",
            "DEFAULT": 1.0,
            "MIN": 0.1,
            "MAX": 20.0
         },
         {
            "NAME": "palspd",
            "TYPE": "float",
            "DEFAULT": 1.0,
            "MIN": 0.0,
            "MAX": 20.0
         }
	]
}*/

#version 330

uniform float fTime;
uniform float palval;
uniform float pald;
uniform float palspd;


layout(location = 0) in vec3 position;
out vec3 outColor;

#include <palettes.vti>
#include <sdf2d.vti>
#include <consts.vti>
#include <uvwrap.vti>



#define RES 0.2


// perlin noise from: https://www.shadertoy.com/view/4sc3z2
#define MOD3 vec3(.1031,.11369,.13787)

vec3 hash33(vec3 p3)
{
	p3 = fract(p3 * MOD3);
    p3 += dot(p3, p3.yxz+19.19);
    return -1.0 + 2.0 * fract(vec3((p3.x + p3.y)*p3.z, (p3.x+p3.z)*p3.y, (p3.y+p3.z)*p3.x));
}
float perlin_noise(vec3 p)
{
    vec3 pi = floor(p);
    vec3 pf = p - pi;

    vec3 w = pf * pf * (3.0 - 2.0 * pf);

    return 	mix(
        		mix(
                	mix(dot(pf - vec3(0, 0, 0), hash33(pi + vec3(0, 0, 0))),
                        dot(pf - vec3(1, 0, 0), hash33(pi + vec3(1, 0, 0))),
                       	w.x),
                	mix(dot(pf - vec3(0, 0, 1), hash33(pi + vec3(0, 0, 1))),
                        dot(pf - vec3(1, 0, 1), hash33(pi + vec3(1, 0, 1))),
                       	w.x),
                	w.z),
        		mix(
                    mix(dot(pf - vec3(0, 1, 0), hash33(pi + vec3(0, 1, 0))),
                        dot(pf - vec3(1, 1, 0), hash33(pi + vec3(1, 1, 0))),
                       	w.x),
                   	mix(dot(pf - vec3(0, 1, 1), hash33(pi + vec3(0, 1, 1))),
                        dot(pf - vec3(1, 1, 1), hash33(pi + vec3(1, 1, 1))),
                       	w.x),
                	w.z),
    			w.y);
}


float hash21(vec2 p)
{
 	p = fract( p*vec2(123.34, 456.21) );
    p += dot(p, p+45.32);
    return fract(p.x*p.y);
}


float star(vec2 p, float time)
{
	float d = length(p);
    float m = (max(0.2, abs(sin(time))) * 0.02) / d;

    m *= smoothstep(1.0, 0.2, d);

    return m;
}


vec3 starField(vec2 uv)
{
    vec3 col = vec3(0);

    vec2 gv = fract(uv) - 0.5;
    vec2 id = floor(uv);

    for (int x=-1; x<=1; x++){
        for (int y=-1; y<=1; y++)
        {
            vec2 offset = vec2(x, y);

            float n = hash21(id + offset);
            float star = star(gv - offset - (vec2(n, fract(n*100.0)) - 0.5), fTime*fract(n*135.246));
            float size = min(1.0, fract(n*1234.567) + 0.1);

            col += star * size;
        }
    }

    return col;
}



void main()
{
    vec2 uv = uvwrap(position);
    vec3 coords = vec3(vec2(uv.x, uv.y + fTime*0.03), fTime*0.3);

    vec3 stars = starField( vec2(coords.x, coords.y)*5.0 );


    float warpAmplitude = 10.0;
   	float warpFrequency = 0.04;

    vec3 clouds = vec3( perlin_noise(coords) ) * 0.3;

    vec3 cloudsCol = 0.5 + 0.5*cos((coords*2.0)+vec3(0,3,9)); //color
    clouds *= cloudsCol;
    stars *= cloudsCol*2.0;
    stars *= clouds+0.5;
    vec3 col = clouds + stars;


    // Output to screen
    outColor = vec3(col);
}